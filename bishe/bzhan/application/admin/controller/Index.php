<?php
namespace app\admin\controller;
use think\Db;
use com\ZYClient;
use com\PclZip;
/*
 * www.zhiyunzhushou.com
 * qq 3044 55 977
 * */
class Index extends Base {

   public function _initialize()
   {



       parent::_initialize(); // TODO: Change the autogenerated stub
   }

    public function index() {

 		$this->setMeta('后台首页');
        $data = array();
		$data['prdnum'] = Db::name('product')->count();
        $data['prdcltnum'] = Db::name('product_client')->count();
        $data['prdnoauthnum'] = Db::name('product_client_noauth')->count();
        $data['adminnum'] = Db::name('member')->where('user_type','admin')->count();
        $this->getNewVersion();
        $this->assign($data);
		return $this->fetch();
	}
	public function getClientObj()
    {
        $zipdir = RUNTIME_PATH.config('auth_zip_dir');
        if(!file_exists($zipdir)) mkdir($zipdir,0777,true);
         $cltobj = new ZYClient(config('auth_server_domain'),config('auth_client_id'),
            config('auth_client_code'),PRJ_VERSION, $zipdir);
         return $cltobj;
    }

    public function getNewVersion()
    {
       $cltobj = $this->getClientObj();
        return $cltobj->getNewVersion();
    }
    public function upgrade()
    {
        set_time_limit(0);
        $this->setMeta('系统升级中');
        //下载更新包
        $cltobj = $this->getClientObj();
        $result = $cltobj->downUpgradePackage();
        if($result==null){
            $this->assign('upinfo', []);
            $this->assign('errmsg', '请检查授权域名');
            return $this->fetch();
        }
        if($result['errno'] !=1000){ //包下载失败，直接返回
              $this->assign('upinfo', []);
            $this->assign('errmsg', $result['errmsg']);
            return $this->fetch();
        }
        $data = $result['data'];
        $zipurl = $data['upzipname'];//下载到本地的压缩包绝对路径


        $zipobj = new PclZip($zipurl);

        if($zipobj->extract(PCLZIP_OPT_PATH,ROOT_PATH)==0){
             $this->assign('errmsg',$zipobj->errorInfo());
            return $this->fetch();
         }
         //删除压缩包
        @unlink($zipurl);
             //查看是否有数据库更新，有执行,根据不同程序自己组装路径
            $sqlpath = ROOT_PATH.'/upgradesql/'.$data['vernum'].".sql";
            if(file_exists($sqlpath)){//批量执行里边的sql语句
                $sqlcontent = file_get_contents($sqlpath);

                if($sqlcontent){
                    $sqlarr = explode(';',$sqlcontent);
                    foreach ($sqlarr as $sql){
                        $sql=trim($sql);

                        if($sql) Db::execute($sql);
                    }
                }
            }
            $this->assign('errmsg', '');
            $this->assign('upinfo', $data);
            return $this->fetch();



    }


	public function login($username = '', $password = '', $verify = '', $loginsafecode='') {
		if (IS_POST) {
			if (!$username || !$password || !$loginsafecode) {
				return $this->error('用户名或密码及安全码不能为空！', '');
			}

 			//验证码验证
			$this->checkVerify($verify);
           if($loginsafecode!=config('loginsafecode')){
               return $this->error('安全码错误');
           }
			$user = model('Member');
			$result  = $user->login($username, $password,'admin');
			if ($result) {
				return $this->success('登录成功！', url('admin/index/index'));
			}
			    return $this->error($user->errmsg,'');

		}
			return $this->fetch();

	}
    public function logout()
    {
        $mod = model('Member');
        $mod->logout();
        $this->redirect('admin/index/login');
    }

	public function clear() {
		if (IS_POST) {
			$clear = input('post.clear/a', array());
			foreach ($clear as $key => $value) {
				if ($value == 'cache') {
					\think\Cache::clear(); // 清空缓存数据
				} elseif ($value == 'log') {
					\think\Log::clear();
				}
			}
			return $this->success("更新成功！", url('admin/index/clear'));
		} else {
			$keylist = array(
				array('name' => 'clear', 'title' => '更新缓存', 'type' => 'checkbox', 'help' => '', 'option' => array(
					'cache' => '缓存数据',
					'log'   => '日志数据',
				),
				),
			);
			$data = array(
				'keyList' => $keylist,
			);
			$this->assign($data);
			$this->setMeta("更新缓存");
			return $this->fetch('public/edit');
		}
	}
}